generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id            String    @id
  username      String    @unique
  email         String    @unique
  passwordHash  String
  role          Role
  sessionNumber String?
  createdAt     DateTime  @default(now())

  // Relations
  videos        Video[]
  comments      Comment[]
  likes         LikeDislike[]
  subscriptions Subscription[]
  subscribers   Subscription[] @relation("subscribers")
}

model Video {
  id          String        @id @default(uuid())
  title       String
  description String?
  url         String
  thumbnail   String?
  duration    Int
  views       Int           @default(0)
  visibility  VideoVisibility @default(PUBLIC)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  userId    String // Changed to String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     LikeDislike[]
}

// Define other models here

model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  userId    String // Changed to String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId   String
  video     Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)

  // Optional: Parent comment for replies
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")

  @@index([userId])
  @@index([videoId])
  @@index([parentId])
}

model LikeDislike {
  id        String    @id @default(uuid())
  type      LikeType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  userId    String // Changed to String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId   String
  video     Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
}

model Subscription {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())

  // Relations
  subscriberId  String // Changed to String
  subscriber    User    @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  channelId     String // Changed to String
  channel       User    @relation("subscribers", fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, channelId])
  @@index([subscriberId])
  @@index([channelId])
}

enum Role {
  USER
  ADMIN
}

enum VideoVisibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

enum LikeType {
  LIKE
  DISLIKE
}