// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
  }

  model User {
    id          String       @id @default(cuid()) // Identifiant unique
    username    String    @unique                      // Nom d'utilisateur unique
    email       String    @unique                      // Email unique
    passwordHash String    // Mot de passe haché
    createdAt   DateTime  @default(now())              // Date de création
    videos      Video[]                                // Relation avec les vidéos
    likesDislikes LikeDislike[]                        // Relation avec les likes/dislikes
    comments    Comment[]                              // Relation avec les commentaires
    subscriptionsFrom Subscription[] @relation("subscriptionsFrom")
    subscriptionsTo   Subscription[] @relation("subscriptionsTo")
  }

  model Video {
    id           String       @id @default(cuid())  // Identifiant unique
    title        String                                    // Titre de la vidéo
    description  String?                                   // Description (nullable)
    url          String    @unique                        // URL unique de la vidéo
    thumbnailUrl String?                                   // URL de la miniature
    publishedAt  DateTime  @default(now())                // Date de publication
    userId       String                                       // Clé étrangère vers User
    user         User      @relation(fields: [userId], references: [id])
    likesDislikes LikeDislike[]                           // Relation avec les likes/dislikes
    comments     Comment[]                                // Relation avec les commentaires
  }

  model LikeDislike {
    id        String      @id @default(cuid())       // Identifiant unique
    isLike    Boolean                                     // `true` pour un like, `false` pour un dislike
    createdAt DateTime @default(now())                   // Date d'ajout
    userId    String                                        // Clé étrangère vers User
    videoId   String                                        // Clé étrangère vers Video
    user      User     @relation(fields: [userId], references: [id])
    video     Video    @relation(fields: [videoId], references: [id])
  }

  model Comment {
    id        String      @id @default(cuid())       // Identifiant unique
    content   String                                     // Contenu du commentaire
    createdAt DateTime @default(now())                   // Date de création
    userId    String                                        // Clé étrangère vers User
    videoId   String                                        // Clé étrangère vers Video
    user      User     @relation(fields: [userId], references: [id])
    video     Video    @relation(fields: [videoId], references: [id])
  }

  model Subscription {
    id              String      @id @default(cuid()) // Identifiant unique
    subscriberId    String                                     // ID de l'utilisateur abonné
    subscribedToId  String                                     // ID de l'utilisateur suivi
    createdAt       DateTime @default(now())               // Date de création
    subscriber      User     @relation("subscriptionsFrom", fields: [subscriberId], references: [id])
    subscribedTo    User     @relation("subscriptionsTo", fields: [subscribedToId], references: [id])
  }
